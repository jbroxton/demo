/**
 * AI Chat Page-Based Response Test
 * 
 * Verifies that the AI chat system correctly queries pages by type
 * instead of using legacy entity models.
 */

import { agentOperationsService } from '@/services/agent-operations';
import { createPage, getPages } from '@/services/pages-db';
import type { Page } from '@/types/models';

// Mock the pages-db service
jest.mock('@/services/pages-db', () => ({
  createPage: jest.fn(),
  getPages: jest.fn(),
  updatePage: jest.fn(),
  deletePage: jest.fn()
}));

const mockCreatePage = createPage as jest.MockedFunction<typeof createPage>;
const mockGetPages = getPages as jest.MockedFunction<typeof getPages>;

describe('AI Chat Page-Based Responses', () => {
  const testTenantId = '22222222-2222-2222-2222-222222222222';
  
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Feature Operations', () => {
    it('should query pages with type="feature" when listing features', async () => {
      // Arrange: Mock successful response with feature pages (UUIDs generated by DB)
      const mockFeaturePages: Page[] = [
        {
          id: 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
          title: 'User Authentication',
          type: 'feature',
          properties: {
            description: {
              type: 'text',
              rich_text: [{ type: 'text', text: { content: 'Login and signup functionality' } }]
            },
            priority: {
              type: 'text', 
              rich_text: [{ type: 'text', text: { content: 'High' } }]
            }
          },
          blocks: [],
          tenant_id: testTenantId,
          created_at: '2024-01-01T00:00:00Z',
          updated_at: '2024-01-01T00:00:00Z'
        },
        {
          id: '550e8400-e29b-41d4-a716-446655440000',
          title: 'Dashboard Analytics',
          type: 'feature',
          properties: {
            description: {
              type: 'text',
              rich_text: [{ type: 'text', text: { content: 'Analytics dashboard for users' } }]
            },
            priority: {
              type: 'text',
              rich_text: [{ type: 'text', text: { content: 'Medium' } }]
            }
          },
          blocks: [],
          tenant_id: testTenantId,
          created_at: '2024-01-01T00:00:00Z',
          updated_at: '2024-01-01T00:00:00Z'
        }
      ];

      mockGetPages.mockResolvedValue({
        success: true,
        data: mockFeaturePages
      });

      // Act: Call the list features operation
      const result = await agentOperationsService.listFeaturePages(testTenantId);

      // Assert: Verify correct page query was made
      expect(mockGetPages).toHaveBeenCalledWith({
        tenantId: testTenantId,
        type: 'feature'
      });

      expect(result.success).toBe(true);
      expect(result.data).toHaveLength(2);
      expect(result.data?.[0].title).toBe('User Authentication');
      expect(result.data?.[0].type).toBe('feature');
      expect(result.data?.[1].title).toBe('Dashboard Analytics');
      expect(result.data?.[1].type).toBe('feature');
    });

    it('should create page with type="feature" when creating features', async () => {
      // Arrange: Mock successful page creation (UUID generated by DB)
      const mockCreatedPage: Page = {
        id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890', // UUID generated by DB
        title: 'New Feature',
        type: 'feature',
        properties: {
          description: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'A new feature description' } }]
          },
          priority: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'High' } }]
          },
          interfaceId: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: '12345678-1234-1234-1234-123456789012' } }]
          }
        },
        blocks: [],
        tenant_id: testTenantId,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z'
      };

      mockCreatePage.mockResolvedValue({
        success: true,
        data: mockCreatedPage
      });

      // Act: Create a new feature (no ID provided, DB generates UUID)
      const result = await agentOperationsService.createFeaturePage({
        name: 'New Feature',
        priority: 'High',
        description: 'A new feature description',
        interfaceId: '12345678-1234-1234-1234-123456789012'
      }, testTenantId);

      // Assert: Verify page was created with correct type and no ID provided
      expect(mockCreatePage).toHaveBeenCalledWith({
        title: 'New Feature',
        type: 'feature',
        properties: {
          description: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'A new feature description' } }]
          },
          priority: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'High' } }]
          },
          interfaceId: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: '12345678-1234-1234-1234-123456789012' } }]
          }
        },
        blocks: [],
        tenant_id: testTenantId
        // Note: No ID field - DB generates UUID automatically
      });

      expect(result.success).toBe(true);
      expect(result.data?.type).toBe('feature');
      expect(result.data?.id).toBe('a1b2c3d4-e5f6-7890-abcd-ef1234567890'); // UUID from DB
    });
  });

  describe('Requirements Operations', () => {
    it('should query pages with type="requirement" when listing requirements', async () => {
      // Arrange: Mock successful response with requirement pages
      const mockRequirementPages: Page[] = [
        {
          id: '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
          title: 'Secure Password Validation',
          type: 'requirement',
          properties: {
            description: {
              type: 'text',
              rich_text: [{ type: 'text', text: { content: 'Password must meet security criteria' } }]
            },
            priority: {
              type: 'text',
              rich_text: [{ type: 'text', text: { content: 'High' } }]
            },
            featureId: {
              type: 'text',
              rich_text: [{ type: 'text', text: { content: 'f47ac10b-58cc-4372-a567-0e02b2c3d479' } }]
            }
          },
          blocks: [],
          tenant_id: testTenantId,
          created_at: '2024-01-01T00:00:00Z',
          updated_at: '2024-01-01T00:00:00Z'
        }
      ];

      mockGetPages.mockResolvedValue({
        success: true,
        data: mockRequirementPages
      });

      // Act: Call the list requirements operation
      const result = await agentOperationsService.listRequirementsPages(testTenantId);

      // Assert: Verify correct page query was made
      expect(mockGetPages).toHaveBeenCalledWith({
        tenantId: testTenantId,
        type: 'requirement'
      });

      expect(result.success).toBe(true);
      expect(result.data).toHaveLength(1);
      expect(result.data?.[0].title).toBe('Secure Password Validation');
      expect(result.data?.[0].type).toBe('requirement');
    });

    it('should create page with type="requirement" when creating requirements', async () => {
      // Arrange: Mock successful page creation (UUID generated by DB)
      const mockCreatedPage: Page = {
        id: '6ba7b811-9dad-11d1-80b4-00c04fd430c8', // UUID generated by DB
        title: 'New Requirement',
        type: 'requirement',
        properties: {
          description: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'A new requirement description' } }]
          },
          priority: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'Medium' } }]
          },
          featureId: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'f47ac10b-58cc-4372-a567-0e02b2c3d479' } }]
          },
          owner: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: '' } }]
          }
        },
        blocks: [],
        tenant_id: testTenantId,
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-01T00:00:00Z'
      };

      mockCreatePage.mockResolvedValue({
        success: true,
        data: mockCreatedPage
      });

      // Act: Create a new requirement (no ID provided, DB generates UUID)
      const result = await agentOperationsService.createRequirementsPage({
        name: 'New Requirement',
        priority: 'Medium',
        description: 'A new requirement description',
        featureId: 'f47ac10b-58cc-4372-a567-0e02b2c3d479'
      }, testTenantId);

      // Assert: Verify page was created with correct type and no ID provided
      expect(mockCreatePage).toHaveBeenCalledWith({
        title: 'New Requirement',
        type: 'requirement',
        properties: {
          description: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'A new requirement description' } }]
          },
          priority: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'Medium' } }]
          },
          owner: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: '' } }]
          },
          featureId: {
            type: 'text',
            rich_text: [{ type: 'text', text: { content: 'f47ac10b-58cc-4372-a567-0e02b2c3d479' } }]
          }
        },
        blocks: [],
        tenant_id: testTenantId
        // Note: No ID field - DB generates UUID automatically
      });

      expect(result.success).toBe(true);
      expect(result.data?.type).toBe('requirement');
      expect(result.data?.id).toBe('6ba7b811-9dad-11d1-80b4-00c04fd430c8'); // UUID from DB
    });
  });

  describe('Product Operations', () => {
    it('should query pages with type="project" when listing products', async () => {
      // Arrange: Mock successful response with product pages
      const mockProductPages: Page[] = [
        {
          id: '123e4567-e89b-12d3-a456-426614174000',
          title: 'E-commerce Platform',
          type: 'project',
          properties: {
            description: {
              type: 'text',
              rich_text: [{ type: 'text', text: { content: 'Online shopping platform' } }]
            }
          },
          blocks: [],
          tenant_id: testTenantId,
          created_at: '2024-01-01T00:00:00Z',
          updated_at: '2024-01-01T00:00:00Z'
        }
      ];

      mockGetPages.mockResolvedValue({
        success: true,
        data: mockProductPages
      });

      // Act: Call the list products operation
      const result = await agentOperationsService.listProductPages(testTenantId);

      // Assert: Verify correct page query was made
      expect(mockGetPages).toHaveBeenCalledWith({
        tenantId: testTenantId,
        type: 'project'
      });

      expect(result.success).toBe(true);
      expect(result.data).toHaveLength(1);
      expect(result.data?.[0].title).toBe('E-commerce Platform');
      expect(result.data?.[0].type).toBe('project');
      expect(result.data?.[0].id).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/); // UUID format
    });
  });

  describe('Page Type Validation', () => {
    it('should use correct page types for all entity operations', () => {
      // This test documents the correct page type mapping:
      // - Products -> type: 'project' 
      // - Features -> type: 'feature'  
      // - Requirements -> type: 'requirement'
      // - Releases -> type: 'release'
      // - Roadmaps -> type: 'roadmap'

      const pageTypeMapping = {
        products: 'project',
        features: 'feature',
        requirements: 'requirement',
        releases: 'release',
        roadmaps: 'roadmap'
      };

      expect(pageTypeMapping.products).toBe('project');
      expect(pageTypeMapping.features).toBe('feature');
      expect(pageTypeMapping.requirements).toBe('requirement');
      expect(pageTypeMapping.releases).toBe('release');
      expect(pageTypeMapping.roadmaps).toBe('roadmap');
    });
  });

  describe('UUID Handling', () => {
    it('should not pass ID when creating new pages (DB generates UUIDs)', async () => {
      // Arrange: Mock successful page creation
      mockCreatePage.mockResolvedValue({
        success: true,
        data: {
          id: '99999999-9999-9999-9999-999999999999', // Generated by DB
          title: 'Test Page',
          type: 'feature',
          properties: {},
          blocks: [],
          tenant_id: testTenantId,
          created_at: '2024-01-01T00:00:00Z',
          updated_at: '2024-01-01T00:00:00Z'
        }
      });

      // Act: Create a feature page
      await agentOperationsService.createFeaturePage({
        name: 'Test Page',
        priority: 'High',
        description: 'Test description',
        interfaceId: 'interface-123'
      }, testTenantId);

      // Assert: Verify createPage was called without an ID field
      const createPageCall = mockCreatePage.mock.calls[0][0];
      expect(createPageCall).not.toHaveProperty('id');
      expect(createPageCall.title).toBe('Test Page');
      expect(createPageCall.type).toBe('feature');
      expect(createPageCall.tenant_id).toBe(testTenantId);
    });
  });

  describe('Error Handling', () => {
    it('should handle page query failures gracefully', async () => {
      // Arrange: Mock page query failure
      mockGetPages.mockResolvedValue({
        success: false,
        error: 'Database connection failed'
      });

      // Act: Attempt to list features
      const result = await agentOperationsService.listFeaturePages(testTenantId);

      // Assert: Error should be propagated
      expect(result.success).toBe(false);
      expect(result.error?.message).toMatch(/Failed to list features|Unexpected error in listFeatures/);
    });
  });
});