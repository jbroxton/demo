import { streamText } from 'ai';
import { openai } from '@ai-sdk/openai';
import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { apiResponse } from '@/utils/api-response';
import { asyncHandler } from '@/utils/api-async-handler';
import { getRequestContext } from '@/utils/api-request-context';
import { 
  searchVectors, 
  storeChatMessage, 
  indexFeature, 
  indexRelease 
} from '@/services/ai-service';
import { supabase } from '@/services/supabase';
import { getFeaturesFromDb, getFeatureById, updateFeature } from '@/services/features-db';
import { getReleasesFromDb } from '@/services/releases-db';

// Verify API key is available
const apiKey = process.env.OPENAI_API_KEY || process.env.NEXT_PUBLIC_OPENAI_API_KEY || '';
if (!apiKey) {
  console.warn('Warning: OpenAI API key not found in environment variables');
}

// Define input schemas matching Vercel AI SDK expectations
// According to https://ai-sdk.dev/docs/reference/ai-sdk-ui/use-chat
const chatInputSchema = z.object({
  messages: z.array(
    z.object({
      role: z.enum(['user', 'assistant', 'system', 'function']),
      content: z.string(),
      id: z.string().optional(), // ID is optional as it's not required in the API
      name: z.string().optional(),
      // Handle new parts array structure (optional)
      parts: z.array(
        z.object({
          text: z.string().optional(),
          type: z.string().optional()
        })
      ).optional()
    })
  ),
  tenantId: z.string().optional(),
  userId: z.string().optional(),
  action: z.enum(['chat', 'index']).optional().default('chat'),
});

// Define schema for feature updates using Zod
const FeatureUpdateSchema = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  priority: z.enum(["Low", "Med", "High"]).optional(),
  requirements: z.array(z.string()).optional(),
});

// Define the tools for feature updates
const tools = [
  {
    type: "function",
    function: {
      name: "getFeatureDetails",
      description: "Get detailed information about a specific feature",
      parameters: {
        type: "object",
        properties: {
          featureId: {
            type: "string",
            description: "The ID of the feature to retrieve",
          },
        },
        required: ["featureId"],
      },
    }
  },
  {
    type: "function",
    function: {
      name: "proposeFeatureUpdate",
      description: "Generate a preview of feature updates for user approval",
      parameters: {
        type: "object",
        properties: {
          featureId: {
            type: "string",
            description: "ID of the feature to update",
          },
          updates: {
            type: "object",
            properties: {
              name: {
                type: "string",
                description: "New name for the feature",
              },
              description: {
                type: "string", 
                description: "New description for the feature",
              },
              priority: {
                type: "string",
                enum: ["Low", "Med", "High"],
                description: "New priority level",
              },
              requirements: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "Updated requirements list",
              },
            },
          },
        },
        required: ["featureId", "updates"],
      },
    }
  },
  {
    type: "function",
    function: {
      name: "applyFeatureUpdate",
      description: "Apply approved feature updates",
      parameters: {
        type: "object",
        properties: {
          featureId: {
            type: "string",
            description: "ID of the feature to update",
          },
          updates: {
            type: "object",
            properties: {
              name: {
                type: "string",
                description: "New name for the feature",
              },
              description: {
                type: "string", 
                description: "New description for the feature",
              },
              priority: {
                type: "string",
                enum: ["Low", "Med", "High"],
                description: "New priority level",
              },
              requirements: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "Updated requirements list",
              },
            },
          },
          approved: {
            type: "boolean",
            description: "Whether the user has approved these changes",
          },
        },
        required: ["featureId", "updates", "approved"],
      },
    }
  }
];

// Handle chat conversations
export const POST = asyncHandler(async (req: NextRequest): Promise<Response | NextResponse> => {
  // Add better error tracking
  console.log('AI Chat API request received:', req.method, new URL(req.url).pathname);
  
  // Check if OpenAI API key is configured
  if (!apiKey) {
    console.error('OpenAI API key is not configured');
    return apiResponse.error('OpenAI API key is not configured. Please add OPENAI_API_KEY to your environment variables.', 500);
  }
  
  // Check Supabase connection if used for vector search
  try {
    const { data: healthcheck, error } = await supabase.from('ai_embeddings').select('count(*)', { count: 'exact', head: true });
    if (error) {
      console.warn('Supabase connection warning:', error.message);
      // We'll continue even if there's an issue, as the table might not exist yet
    } else {
      console.log('Supabase connection successful');
    }
  } catch (dbError) {
    console.warn('Supabase healthcheck error:', dbError);
    // Continue anyway, as we can still use OpenAI without vector search
  }

  try {
    console.log('Getting request context...');
    const { body, tenantId: contextTenantId, userId } = await getRequestContext(req);
    
    // Log the body for debugging (sanitized)
    console.log('Request body:', {
      ...body,
      messages: body.messages ? 
        `[${body.messages.length} messages, last: ${
          body.messages.length > 0 ? 
          JSON.stringify({
            role: body.messages[body.messages.length-1].role,
            contentPreview: body.messages[body.messages.length-1].content?.substring(0, 50) + '...'
          }) : 'none'
        }]` : 'none'
    });
    
    // Validate the body using our schema
    console.log('Validating request body...');
    try {
      const validatedBody = chatInputSchema.parse(body);
      const { messages, tenantId: bodyTenantId, action, userId: bodyUserId } = validatedBody;
      console.log('Request validation successful');
    } catch (validationError) {
      console.error('Request validation failed:', validationError);
      throw new Error(`Invalid request format: ${validationError.message}`);
    }
    
    // Re-parse after validation since we need the values
    const validatedBody = chatInputSchema.parse(body);
    const { messages, tenantId: bodyTenantId, action, userId: bodyUserId } = validatedBody;
    
    // Use tenant ID from context, fallback to body, then default
    const tenantId = contextTenantId || bodyTenantId || 'default';
    const userIdForMessages = userId || bodyUserId || 'anonymous';
    
    // Handle indexing request
    if (action === 'index') {
      return await handleIndexing(tenantId);
    }
    
    // Store user message
    const lastMessage = messages.length > 0 ? messages[messages.length - 1] : null;
    if (lastMessage && lastMessage.role === 'user') {
      await storeChatMessage(userIdForMessages, tenantId, 'user', lastMessage.content);
    }
    
    // Skip vector search if no valid user message
    if (!lastMessage || lastMessage.role !== 'user' || !lastMessage.content.trim()) {
      console.log('No valid user message found, using fallback response');
      
      // Fallback response if no valid input is provided
      const modelToUse = process.env.OPENAI_MODEL || 'gpt-3.5-turbo';
      console.log(`Using fallback with model: ${modelToUse}`);
      
      try {
        const result = await streamText({
          model: openai(modelToUse),
          messages: [
            { role: 'system', content: 'You are a Product Management Assistant.' },
            { role: 'user', content: 'Hello' },
          ],
        });
        
        return result.toTextStreamResponse();
      } catch (fallbackError) {
        console.error('Error in fallback response:', fallbackError);
        return apiResponse.error('Could not generate a response. Please try again later.', 500);
      }
    }
    
    // Improved formatting for better context retrieval based on AI SDK docs
    const formattedQuery = lastMessage.content.trim();
    
    // Perform vector search for context
    let searchResults = [];
    let contextAvailable = false;
    
    try {
      console.log('Attempting vector search for query:', formattedQuery.substring(0, 50));
      searchResults = await searchVectors(formattedQuery, tenantId);
      contextAvailable = true;
      console.log(`Vector search successful, found ${searchResults.length} results`);
    } catch (error) {
      console.error('Vector search error:', error);
      console.log('Proceeding without vector search context');
      // Recover gracefully by proceeding without context
      searchResults = [];
    }
    
    // Format context from search results with source references
    // Adding document references according to best practices in AI SDK Core docs
    const contextBlocks = searchResults.map((result, i) => {
      // Extract entity name and type from metadata
      const entityName = result.metadata?.name || 'Unknown';
      const entityType = result.metadata?.entity_type || result.entity_type || 'item';
      
      // Format as a numbered reference for better context retrieval
      return `[${i + 1}] ${entityType.toUpperCase()}: ${entityName}\n${result.content.trim()}`;
    });
    
    const context = contextBlocks.join('\n\n');
    
    // Enhanced system prompt with context
    const systemPrompt = contextAvailable 
      ? `
        You are a Product Management AI assistant for Speqq.
        You help users manage their products, features, and releases.
        
        When users ask about their data, use the following context to answer accurately.
        When referencing information, cite the source number like [1] or [2].
        
        CONTEXT:
        ${context || 'No specific product data found for this query.'}
        
        If you don't know something or can't find it in the context, be honest and say you don't know.
        
        When a user wants to update a feature:
        1. Use getFeatureDetails to retrieve current data
        2. Use proposeFeatureUpdate to show a preview of changes
        3. Ask the user to confirm or reject the changes
        4. Use applyFeatureUpdate to apply confirmed changes
        
        Always maintain a professional, helpful tone and provide concise, actionable answers.
        `
      : `
        You are a Product Management AI assistant for Speqq.
        You help users manage their products, features, and releases.
        
        I don't have access to your specific product data at the moment, but I can still help with general product management advice and questions.
        
        When a user wants to update a feature:
        1. Use getFeatureDetails to retrieve current data
        2. Use proposeFeatureUpdate to show a preview of changes
        3. Ask the user to confirm or reject the changes
        4. Use applyFeatureUpdate to apply confirmed changes
        
        Always maintain a professional, helpful tone and provide concise, actionable answers.
        `;
    
    // Generate OpenAI response with function calling
    try {
      // Use gpt-3.5-turbo as a fallback if gpt-4o fails
      const modelToUse = process.env.OPENAI_MODEL || 'gpt-3.5-turbo';
      console.log(`Using OpenAI model: ${modelToUse}`);
      
      const result = await streamText({
        model: openai(modelToUse),
        messages: [
          { role: 'system', content: systemPrompt },
          ...messages,
        ],
        tools: {
          getFeatureDetails: {
            description: "Get detailed information about a specific feature",
            parameters: z.object({
              featureId: z.string().describe("The ID of the feature to retrieve"),
            }),
            execute: async ({ featureId }) => {
              if (!featureId) {
                throw new Error('Feature ID is required');
              }
              
              const feature = await getFeatureById(featureId, tenantId);
              
              if (!feature) {
                throw new Error(`Feature with ID ${featureId} not found`);
              }
              
              return feature;
            }
          },
          proposeFeatureUpdate: {
            description: "Generate a preview of feature updates for user approval",
            parameters: z.object({
              featureId: z.string().describe("ID of the feature to update"),
              updates: z.object({
                name: z.string().optional().describe("New name for the feature"),
                description: z.string().optional().describe("New description for the feature"),
                priority: z.enum(["Low", "Med", "High"]).optional().describe("New priority for the feature"),
                requirements: z.array(z.string()).optional().describe("New requirements for the feature")
              })
            }),
            execute: async ({ featureId, updates }) => {
              if (!featureId) {
                throw new Error('Feature ID is required');
              }
              
              // Validate updates using Zod schema
              let validatedUpdates;
              try {
                validatedUpdates = FeatureUpdateSchema.parse(updates);
              } catch (validationError) {
                throw new Error(`Invalid feature updates: ${validationError.message}`);
              }
              
              // Get current feature
              const feature = await getFeatureById(featureId, tenantId);
              if (!feature) {
                throw new Error(`Feature with ID ${featureId} not found`);
              }
              
              // Return before/after comparison
              return {
                before: {
                  name: feature.name,
                  description: feature.description,
                  priority: feature.priority,
                  requirements: feature.requirements,
                },
                after: {
                  name: validatedUpdates.name || feature.name,
                  description: validatedUpdates.description || feature.description,
                  priority: validatedUpdates.priority || feature.priority,
                  requirements: validatedUpdates.requirements || feature.requirements,
                }
              };
            }
          },
          applyFeatureUpdate: {
            description: "Apply approved feature updates",
            parameters: z.object({
              featureId: z.string().describe("ID of the feature to update"),
              updates: z.object({
                name: z.string().optional(),
                description: z.string().optional(),
                priority: z.enum(["Low", "Med", "High"]).optional(),
                requirements: z.array(z.string()).optional()
              }),
              approved: z.boolean().describe("Whether the user approved the changes")
            }),
            execute: async ({ featureId, updates, approved }) => {
              if (!featureId) {
                throw new Error('Feature ID is required');
              }
              
              if (approved === undefined) {
                throw new Error('Approval status is required');
              }
              
              if (!approved) {
                return { 
                  success: false, 
                  message: 'Changes were not applied as they were rejected by the user' 
                };
              }
              
              // Validate updates using Zod
              let validatedUpdates;
              try {
                validatedUpdates = FeatureUpdateSchema.parse(updates);
              } catch (validationError) {
                throw new Error(`Invalid feature updates: ${validationError.message}`);
              }
              
              // Get feature to ensure it exists
              const feature = await getFeatureById(featureId, tenantId);
              if (!feature) {
                throw new Error(`Feature with ID ${featureId} not found`);
              }
              
              // Apply updates to the feature
              const resultData = await updateFeature(featureId, validatedUpdates, tenantId);
              
              // Re-index the feature after update
              await indexFeature(resultData, tenantId);
              
              return { 
                success: true, 
                message: 'Feature updated successfully',
                updatedFeature: resultData
              };
            }
          }
        },
        temperature: 0.7,
        maxTokens: 1000,
        onFinish: async (completion) => {
          try {
            // Store assistant message
            await storeChatMessage(userIdForMessages, tenantId, 'assistant', completion.text);
          } catch (error) {
            console.error('Error storing assistant message:', error);
            // Continue even if storage fails - don't break the user experience
          }
      });
      
      return result.toTextStreamResponse();
          try {
            // Handle getFeatureDetails
            if (name === 'getFeatureDetails') {
              const { featureId } = args;
              
              if (!featureId) {
                throw new Error('Feature ID is required');
              }
              
              const feature = await getFeatureById(featureId, tenantId);
              
              if (!feature) {
                throw new Error(`Feature with ID ${featureId} not found`);
              }
              
              return {
                role: 'function',
                name: 'getFeatureDetails',
                content: JSON.stringify(feature),
              }
            }
            
            // Handle proposeFeatureUpdate
            if (name === 'proposeFeatureUpdate') {
              const { featureId, updates } = args;
              
              if (!featureId) {
                throw new Error('Feature ID is required');
              }
              
              // Validate updates using Zod schema
              let validatedUpdates;
              try {
                validatedUpdates = FeatureUpdateSchema.parse(updates);
              } catch (validationError) {
                throw new Error(`Invalid feature updates: ${validationError.message}`);
              }
              
              const feature = await getFeatureById(featureId, tenantId);
              
              if (!feature) {
                throw new Error(`Feature with ID ${featureId} not found`);
              }
              
              // Format before/after comparison
              const beforeAfter = {
                before: {
                  name: feature.name,
                  description: feature.description,
                  priority: feature.priority,
                  requirements: feature.requirements,
                },
                after: {
                  name: validatedUpdates.name || feature.name,
                  description: validatedUpdates.description || feature.description,
                  priority: validatedUpdates.priority || feature.priority,
                  requirements: validatedUpdates.requirements || feature.requirements,
                }
              };
              
              return {
                role: 'function',
                name: 'proposeFeatureUpdate',
                content: JSON.stringify(beforeAfter),
              }
            }
            
            // Handle applyFeatureUpdate
            if (name === 'applyFeatureUpdate') {
              const { featureId, updates, approved } = args;
              
              if (!featureId) {
                throw new Error('Feature ID is required');
              }
              
              if (approved === undefined) {
                throw new Error('Approval status is required');
              }
              
              if (!approved) {
                return {
                  role: 'function',
                  name: 'applyFeatureUpdate',
                  content: JSON.stringify({ 
                    success: false, 
                    message: 'Changes were not applied as they were rejected by the user' 
                  }),
                }
              }
              
              // Validate updates using Zod
              let validatedUpdates;
              try {
                validatedUpdates = FeatureUpdateSchema.parse(updates);
              } catch (validationError) {
                throw new Error(`Invalid feature updates: ${validationError.message}`);
              }
              
              // Get feature to ensure it exists
              const feature = await getFeatureById(featureId, tenantId);
              if (!feature) {
                throw new Error(`Feature with ID ${featureId} not found`);
              }
              
              // Apply updates to the feature
              const result = await updateFeature(featureId, validatedUpdates, tenantId);
              
              // Re-index the feature after update
              await indexFeature(result, tenantId);
              
              return {
                role: 'function',
                name: 'applyFeatureUpdate',
                content: JSON.stringify({ 
                  success: true, 
                  message: 'Feature updated successfully',
                  updatedFeature: result
                }),
              }
            }
            
            // If function not found
            throw new Error(`Unknown function: ${name}`);
          } catch (error) {
            console.error(`Function call error (${name}):`, error);
            // Return a proper error response that the LLM can understand
            return {
              role: 'function',
              name,
              content: JSON.stringify({ 
                error: true, 
                message: error instanceof Error ? error.message : 'An error occurred during function execution'
              }),
            }
          }
        },
        
        onCompletion: async (completion) => {
          try {
            // Store assistant message
            await storeChatMessage(userIdForMessages, tenantId, 'assistant', completion);
          } catch (error) {
            console.error('Error storing assistant message:', error);
            // Continue even if storage fails - don't break the user experience
          }
        },
      });
      
      return new StreamingTextResponse(stream);
    } catch (error) {
      // Provide more detailed error logging
      console.error('OpenAI API error:', error);
      
      // Extract error details if available
      let errorMessage = 'An error occurred while generating a response. Please try again later.';
      
      if (error instanceof Error) {
        // Include the specific error message for debugging
        console.error('Error details:', error.message);
        
        // Check for common OpenAI errors
        if (error.message.includes('authentication')) {
          errorMessage = 'Authentication error with OpenAI API. Please check your API key.';
        } else if (error.message.includes('rate limit')) {
          errorMessage = 'Rate limit exceeded with OpenAI API. Please try again later.';
        } else if (error.message.includes('timeout')) {
          errorMessage = 'OpenAI API request timed out. Please try again later.';
        }
      }
      
      return apiResponse.error(errorMessage, 500);
    }
  } catch (error) {
    console.error('Unexpected error in chat API:', error);
    return apiResponse.error(
      'An unexpected error occurred. Please try again later.',
      500
    );
  }
});

// Handle data indexing
async function handleIndexing(tenantId: string): Promise<NextResponse> {
  try {
    console.log('Starting indexing process for tenant:', tenantId);
    
    // Validate tenantId
    if (!tenantId) {
      console.error('Invalid tenant ID provided for indexing');
      return NextResponse.json(
        { success: false, error: 'Invalid tenant ID provided' },
        { status: 400 }
      );
    }
    
    // Get all features and releases for this tenant
    console.log('Fetching features and releases for indexing...');
    let features;
    let releases;
    
    try {
      const featuresResult = await getFeaturesFromDb(tenantId);
      features = featuresResult.success ? featuresResult.data : [];
      console.log(`Found ${features?.length || 0} features to index`);
    } catch (featureError) {
      console.error('Error fetching features for indexing:', featureError);
      return NextResponse.json(
        { success: false, error: `Error fetching features: ${featureError instanceof Error ? featureError.message : 'Unknown error'}` },
        { status: 500 }
      );
    }
    
    try {
      const releasesResult = await getReleasesFromDb(tenantId);
      releases = releasesResult.success ? releasesResult.data : [];
      console.log(`Found ${releases?.length || 0} releases to index`);
    } catch (releaseError) {
      console.error('Error fetching releases for indexing:', releaseError);
      return NextResponse.json(
        { success: false, error: `Error fetching releases: ${releaseError instanceof Error ? releaseError.message : 'Unknown error'}` },
        { status: 500 }
      );
    }
    
    let indexedCount = 0;
    let errors = [];
    
    // Index features in smaller batches (5 instead of 10) to reduce chances of errors
    if (features && Array.isArray(features)) {
      console.log('Starting feature indexing...');
      for (let i = 0; i < features.length; i += 5) {
        const batch = features.slice(i, i + 5);
        console.log(`Processing feature batch ${i/5 + 1}/${Math.ceil(features.length/5)}`);
        
        // Sequential processing to avoid overwhelming the API
        for (const feature of batch) {
          try {
            await indexFeature(feature, tenantId);
            indexedCount++;
            console.log(`Indexed feature: ${feature.id} - ${feature.name}`);
          } catch (error) {
            const errorMsg = `Feature ${feature.id}: ${error instanceof Error ? error.message : 'Unknown error'}`;
            console.error(`Error indexing feature:`, errorMsg);
            errors.push(errorMsg);
          }
        }
      }
    }
    
    // Index releases in smaller batches (5 instead of 10)
    if (releases && Array.isArray(releases)) {
      console.log('Starting release indexing...');
      for (let i = 0; i < releases.length; i += 5) {
        const batch = releases.slice(i, i + 5);
        console.log(`Processing release batch ${i/5 + 1}/${Math.ceil(releases.length/5)}`);
        
        // Sequential processing to avoid overwhelming the API
        for (const release of batch) {
          try {
            await indexRelease(release, tenantId);
            indexedCount++;
            console.log(`Indexed release: ${release.id} - ${release.name}`);
          } catch (error) {
            const errorMsg = `Release ${release.id}: ${error instanceof Error ? error.message : 'Unknown error'}`;
            console.error(`Error indexing release:`, errorMsg);
            errors.push(errorMsg);
          }
        }
      }
    }
    
    console.log(`Indexing completed. Success: ${indexedCount} items, Errors: ${errors.length} items`);
    return NextResponse.json({
      success: true,
      indexed: indexedCount,
      errors: errors.length > 0 ? errors : undefined,
    });
  } catch (error) {
    console.error('Unexpected error during indexing process:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Failed to index data',
      },
      { status: 500 }
    );
  }
}