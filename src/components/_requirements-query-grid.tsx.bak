"use client";

import React, { useState, useMemo, useCallback, useEffect } from 'react';
import { toast } from 'sonner';
import { Requirement, Release } from '@/types/models';
import { 
  MaterialReactTable, 
  useMaterialReactTable,
  type MRT_ColumnDef,
  type MRT_Row,
} from 'material-react-table';
import '@mui/material/styles';
import { RequirementActionBar } from './requirement-action-bar';
import { useRequirementsQuery } from '@/hooks/use-requirements-query';
import { useReleasesQuery } from '@/hooks/use-releases-query';

// Define props interface for the component
interface RequirementsGridProps {
  featureId: string;
  userId?: string;
}

export function RequirementsQueryGrid({ featureId, userId = 'anonymous' }: RequirementsGridProps) {
  // State
  const [isClient, setIsClient] = useState(false);
  const [rowSelection, setRowSelection] = useState({});
  
  // React Query hooks
  const requirementsQuery = useRequirementsQuery();
  const releasesQuery = useReleasesQuery();
  
  // Get requirements for this feature
  const { data: requirements = [], isLoading: requirementsLoading } = 
    requirementsQuery.getRequirementsByFeatureId(featureId);
  
  // Get releases for this feature (if needed for future functionality)
  const featureReleases: Release[] = releasesQuery.getReleasesByFeatureId(featureId);
  const releasesLoading = releasesQuery.isLoading;

  // Set isClient on mount
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Get count of selected rows
  const selectedCount = useMemo(() => 
    Object.keys(rowSelection).length,
    [rowSelection]
  );

  // Define columns 
  const columns = useMemo<MRT_ColumnDef<Requirement>[]>(
    () => [
      {
        accessorKey: 'name',
        header: 'Name',
        enableSorting: false,
        enableColumnActions: false,
        enableColumnFilter: false,
        enableResizing: false,
        size: 200,
        minSize: 180,
        maxSize: 300,
        Cell: ({ cell }) => (
          <div className="truncate font-medium">
            {cell.getValue<string>() || ""}
          </div>
        ),
      },
      {
        accessorKey: 'description',
        header: 'Description',
        enableSorting: false,
        enableColumnActions: false,
        enableColumnFilter: false,
        enableResizing: false,
        size: 400,
        minSize: 300,
        Cell: ({ cell }) => (
          <div className="truncate">
            {cell.getValue<string>() || ""}
          </div>
        ),
      },
      {
        accessorKey: 'priority',
        header: 'Priority',
        enableSorting: false,
        enableColumnActions: false,
        enableColumnFilter: false,
        enableResizing: false,
        size: 150,
        minSize: 120,
        maxSize: 150,
        Cell: ({ cell }) => {
          const priority = cell.getValue<string>();
          return (
            <div className="priority-cell">
              <span className={`priority-badge priority-${priority?.toLowerCase()}`}>
                {priority}
              </span>
            </div>
          );
        },
      },
    ],
    []
  );

  // Handle adding a requirement
  const handleAddRequirement = useCallback(() => {
    // Create a default requirement
    const newRequirement = {
      name: 'New Requirement',
      description: '',
      priority: 'Med' as 'High' | 'Med' | 'Low',
      featureId: featureId,
    };
    
    // Add the requirement using the mutation
    requirementsQuery.addRequirement(newRequirement)
      .then(() => {
        toast.success('Requirement added successfully');
      })
      .catch((error) => {
        console.error('Error adding requirement:', error);
        toast.error('Failed to add requirement');
      });
  }, [featureId, requirementsQuery]);

  // Handle deleting selected requirements
  const handleDeleteRequirements = useCallback(() => {
    if (selectedCount === 0) return;
    
    // Get the IDs of selected rows
    const selectedIds = Object.keys(rowSelection);
    
    // Delete each selected requirement
    Promise.all(
      selectedIds.map(id => 
        requirementsQuery.deleteRequirement(id, featureId)
      )
    )
      .then(() => {
        toast.success(`${selectedCount} requirement(s) deleted`);
        setRowSelection({});
      })
      .catch((error) => {
        console.error('Error deleting requirements:', error);
        toast.error('Failed to delete requirements');
      });
  }, [rowSelection, selectedCount, featureId, requirementsQuery]);
  
  // Handle file attachment
  const handleAttachFile = useCallback(() => {
    toast.info("File Attachment feature will be implemented soon");
  }, []);

  // Create table instance with minimal configuration
  const table = useMaterialReactTable({
    columns,
    data: requirements,
    enableRowSelection: true,
    enableRowNumbers: true,
    enableStickyHeader: true,
    enableColumnResizing: false,
    enableSorting: false,
    positionToolbarAlertBanner: 'bottom',
    layoutMode: 'grid', 
    enableColumnActions: false,
    enableColumnFilters: false,
    manualFiltering: false, 
    enableFilters: false,
    enableGlobalFilter: false,
    enableColumnFilterModes: false,
    enableDensityToggle: false,
    enableFullScreenToggle: false,
    enableHiding: false,
    enablePinning: false,
    enableGrouping: false,
    enableRowVirtualization: false,
    enableSelectAll: true,
    columnVirtualizerOptions: { overscan: 4 },
    enableRowActions: false,
    enablePagination: true,
    paginationDisplayMode: 'pages',
    muiPaginationProps: {
      rowsPerPageOptions: [10, 20, 50, 100],
      showFirstButton: true,
      showLastButton: true,
    },
    positionPagination: 'bottom',
    displayColumnDefOptions: {
      'mrt-row-select': {
        header: '',
        size: 50,
        enableColumnActions: false,
        enableSorting: false,
      },
      'mrt-row-numbers': {
        header: '#',
        size: 50,
        enableColumnActions: false,
        enableSorting: false,
      },
      'mrt-row-actions': {
        header: '',
        size: 0,
        enableResizing: false,
        enableColumnActions: false,
      },
    },
    renderTopToolbarCustomActions: () => (
      <div className="requirement-action-bar">
        <RequirementActionBar 
          onAddRequirement={handleAddRequirement} 
          onDeleteRequirements={handleDeleteRequirements}
          onAttachFile={handleAttachFile}
          selectedCount={selectedCount}
        />
      </div>
    ),
    state: {
      isLoading: Boolean(requirementsLoading || releasesLoading),
      rowSelection,
    },
    onRowSelectionChange: setRowSelection,
    initialState: { 
      density: 'compact',
      columnVisibility: {},
      pagination: {
        pageSize: 20,
        pageIndex: 0
      }
    },
    getRowId: row => row.id,
    columnResizeMode: 'onEnd',
    enableEditing: true,
    editDisplayMode: 'row',
    onEditingRowSave: async ({ row, values }) => {
      try {
        // Remove id from values to avoid duplicate id issue
        const { id, ...updateValues } = values;
        
        // Call update mutation with the row's values
        await requirementsQuery.updateRequirementMutation.mutateAsync({
          id: row.id,
          ...updateValues,
        });
        
        toast.success('Requirement updated');
        table.setEditingRow(null);
        return;
      } catch (error) {
        console.error('Error saving row:', error);
        toast.error('Failed to update requirement');
        return;
      }
    },
  });

  // Simple error state if not on client
  if (!isClient) {
    return (
      <div className="requirements-grid-loading">
        <p>Loading requirements grid...</p>
      </div>
    );
  }
  
  // Return a very basic table without ThemeProvider
  return (
    <div className="requirements-grid-container">
      <MaterialReactTable table={table} />
    </div>
  );
}