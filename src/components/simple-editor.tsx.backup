"use client";

import React, { useCallback, useEffect, useState, useRef } from 'react';
import { useEditor, EditorContent, BubbleMenu, FloatingMenu } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Image from '@tiptap/extension-image';
import Link from '@tiptap/extension-link';
import TextAlign from '@tiptap/extension-text-align';
import TaskList from '@tiptap/extension-task-list';
import TaskItem from '@tiptap/extension-task-item';
import Typography from '@tiptap/extension-typography';
import Placeholder from '@tiptap/extension-placeholder';
import UnderlineExtension from '@tiptap/extension-underline';
import CodeBlockLowlight from '@tiptap/extension-code-block-lowlight';
import Table from '@tiptap/extension-table';
import TableRow from '@tiptap/extension-table-row';
import TableCell from '@tiptap/extension-table-cell';
import TableHeader from '@tiptap/extension-table-header';
import { common, createLowlight } from 'lowlight';
import 'highlight.js/styles/atom-one-dark.css';
import '@/styles/code-highlight.css';
import javascript from 'highlight.js/lib/languages/javascript';
import typescript from 'highlight.js/lib/languages/typescript';
import html from 'highlight.js/lib/languages/xml';
import css from 'highlight.js/lib/languages/css';
import python from 'highlight.js/lib/languages/python';
import json from 'highlight.js/lib/languages/json';
import bash from 'highlight.js/lib/languages/bash';
import debounce from 'lodash/debounce';

// Create a lowlight instance with common languages
const lowlight = createLowlight(common);

// Register additional languages
lowlight.register('javascript', javascript);
lowlight.register('js', javascript);
lowlight.register('typescript', typescript);
lowlight.register('ts', typescript);
lowlight.register('html', html);
lowlight.register('css', css);
lowlight.register('python', python);
lowlight.register('py', python);
lowlight.register('json', json);
lowlight.register('bash', bash);
lowlight.register('sh', bash);


// Lucide React Icons
import {
  Bold,
  Italic,
  Underline as UnderlineIcon,
  Strikethrough,
  List,
  ListOrdered,
  AlignLeft,
  AlignCenter,
  AlignRight,
  AlignJustify,
  Heading1,
  Heading2,
  Heading3,
  Image as ImageIcon,
  Link as LinkIcon,
  CheckSquare,
  Undo,
  Redo,
  Code,
  FileCode,
  Quote,
  Table as TableIcon,
  RowsIcon,
  ColumnsIcon,
  Trash2,
  Plus,
  ChevronsUp,
  ChevronsDown,
  ChevronsLeft,
  ChevronsRight,
  Combine,
  Split,
  Grid
} from 'lucide-react';
import { Button } from './ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "./ui/tooltip";

interface SimpleEditorProps {
  initialContent?: any;
  onChange?: (content: string) => void;
  placeholder?: string;
  readOnly?: boolean;
  className?: string;
  persistenceKey?: string; // Unique key for content persistence between tab switches
  onBlur?: () => void; // Called when editor loses focus (for auto-save)
  saveDocument?: () => Promise<void>; // Direct function to trigger document save
}

export function SimpleEditor({
  initialContent = '',
  onChange,
  placeholder = 'What are we building today?',
  readOnly = false,
  className = '',
  persistenceKey,
  onBlur,
  saveDocument
}: SimpleEditorProps) {
  const [isClient, setIsClient] = useState(false);
  const [lastSavedAt, setLastSavedAt] = useState<Date | null>(null);
  
  // Track if editor has been initialized with content
  const hasInitialized = useRef(false);
  // Track if a transaction is being applied programmatically 
  const isApplyingTransaction = useRef(false);
  // Track the last content for comparison
  const lastContent = useRef<string>('');
  
  // Process initialContent if it's a JSON string
  const processedContent = useCallback(() => {
    if (typeof initialContent === 'string') {
      try {
        if (initialContent.startsWith('{') || initialContent.startsWith('[')) {
          return JSON.parse(initialContent);
        }
      } catch (e) {
        console.error('Error parsing initial content:', e);
      }
    }
    return initialContent;
  }, [initialContent]);

  // Create debounced onChange to reduce updates
  const debouncedOnChange = useRef(
    debounce((content: string) => {
      if (onChange) {
        onChange(content);
      }
    }, 500)
  ).current;

  // Editor instance with extensions
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        // Disable the default code block as we'll use the lowlight version
        codeBlock: false,
        // Use the default StarterKit blockquote with no customization
        blockquote: {},
        // Enhanced heading with markdown shortcuts enabled
        heading: {
          levels: [1, 2, 3],
          HTMLAttributes: {
            class: 'font-bold',
          },
        },
      }),
      Typography,
      UnderlineExtension,
      CodeBlockLowlight.configure({
        lowlight,
        defaultLanguage: 'javascript',
        HTMLAttributes: {
          class: 'rounded-md bg-[#1a1a1c] p-4 my-2 font-mono text-sm overflow-auto',
          spellcheck: 'false',
        },
      }),
      Link.configure({
        openOnClick: true,
        HTMLAttributes: {
          class: 'text-blue-500 underline',
        },
      }),
      Image.configure({
        allowBase64: true,
        HTMLAttributes: {
          class: 'rounded-md max-w-full',
        },
      }),
      TextAlign.configure({
        types: ['heading', 'paragraph', 'blockquote'],
        alignments: ['left', 'center', 'right', 'justify'],
      }),
      TaskList.configure({
        HTMLAttributes: {
          class: 'not-prose pl-2 list-none',
        },
      }),
      TaskItem.configure({
        HTMLAttributes: {
          class: 'flex items-start my-1',
        },
        nested: true,
      }),
      // Table extensions configuration
      Table.configure({
        resizable: true,
        HTMLAttributes: {
          class: 'border-collapse table-auto w-full my-4',
        },
      }),
      TableRow.configure({
        HTMLAttributes: {
          class: 'border-b border-gray-700',
        },
      }),
      TableHeader.configure({
        HTMLAttributes: {
          class: 'border-b-2 border-gray-600 bg-gray-800 text-left p-2 font-bold',
        },
      }),
      TableCell.configure({
        HTMLAttributes: {
          class: 'border border-gray-700 p-2',
        },
      }),
      Placeholder.configure({
        placeholder,
        emptyEditorClass: 'is-editor-empty',
      }),
    ],
    content: processedContent(),
    editorProps: {
      attributes: {
        class: 'prose prose-invert p-6 focus:outline-none min-h-full',
      },
      handlePaste: (view, event) => {
        return false;
      },
    },
    onUpdate: ({ editor }) => {
      // Only send updates to parent if they're not from programmatic changes
      if (!isApplyingTransaction.current) {
        // Get current content
        const json = editor.getJSON();
        const jsonString = JSON.stringify(json);
        
        // Update last content reference
        lastContent.current = jsonString;
        
        // Debounce the onChange to parent
        debouncedOnChange(jsonString);
        
        // Save to localStorage for recovery
        if (persistenceKey && window.localStorage) {
          localStorage.setItem(`tiptap-content-${persistenceKey}`, jsonString);
        }
      }
    },
    // Monitor all transactions to distinguish between user and programmatic changes
    onTransaction: ({ transaction }) => {
      // If the transaction has our specific meta flag, it's a programmatic update
      if (transaction.getMeta('isExternalContentUpdate')) {
        isApplyingTransaction.current = true;
        // Reset after the current call stack completes
        setTimeout(() => {
          isApplyingTransaction.current = false;
        }, 0);
      }
    },
    onFocus: () => {
      // The editor has focus now, no additional action needed
    },
    onBlur: (props) => {
      // Forward the blur event if handler provided
      if (onBlur) {
        onBlur();
      }
    },
    editable: !readOnly,
  });

  // Set client side flag
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Set up editor content on initial load
  useEffect(() => {
    // Skip if editor isn't available 
    if (!editor || editor.isDestroyed) {
      return;
    }
    
    // Process content
    const content = processedContent();
    const contentString = typeof content === 'string' ? content : JSON.stringify(content);
    
    // Skip if content hasn't changed
    if (lastContent.current === contentString) {
      return;
    }
    
    // For first load, just set the content directly
    if (!hasInitialized.current) {
      // Set initial content and mark as a programmatic update
      isApplyingTransaction.current = true;
      
      // Use Tiptap's safer setContent API instead of direct nodeFromJSON
      editor.commands.setContent(content);
      
      // Store for comparison
      lastContent.current = contentString;
      
      // Mark as initialized
      hasInitialized.current = true;
      console.log('[SimpleEditor] Editor initialized with initial content');
      
      // Reset flag
      setTimeout(() => {
        isApplyingTransaction.current = false;
      }, 0);
      
      return;
    }
    
    // If editor is focused (user is typing), don't update content
    if (editor.isFocused) {
      console.log('[SimpleEditor] Skipping content update while editor is focused');
      return;
    }
    
    // Otherwise, it's safe to update content (when editor doesn't have focus)
    console.log('[SimpleEditor] Updating content when editor is not focused');
    
    // Set flag that this is a programmatic update
    isApplyingTransaction.current = true;
    
    // Use Tiptap's safer setContent API instead of direct nodeFromJSON
    editor.commands.setContent(content);
    
    // Update stored content
    lastContent.current = contentString;
    
    // Reset flag after a brief delay
    setTimeout(() => {
      isApplyingTransaction.current = false;
    }, 0);
  }, [editor, initialContent, processedContent]);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      debouncedOnChange.cancel();
    };
  }, [debouncedOnChange]);

  // Define helper functions for editor interactions
  // Not using useCallback since it causes issues with hook order
  const addImage = () => {
    if (!editor) return;
    const url = window.prompt('Image URL');
    if (url) {
      editor.chain().focus().setImage({ src: url }).run();
    }
  };

  const addLink = () => {
    if (!editor) return;
    const url = window.prompt('URL');
    if (url) {
      editor.chain().focus().extendMarkRange('link').setLink({ href: url }).run();
    }
  };
  
  // Table operations helper
  const tableOperations = {
    // Add a row above current position
    addRowBefore: () => {
      if (!editor) return;
      editor.chain().focus().addRowBefore().run();
    },
    
    // Add a row below current position
    addRowAfter: () => {
      if (!editor) return;
      editor.chain().focus().addRowAfter().run();
    },
    
    // Add a column to the left of current position
    addColumnBefore: () => {
      if (!editor) return;
      editor.chain().focus().addColumnBefore().run();
    },
    
    // Add a column to the right of current position
    addColumnAfter: () => {
      if (!editor) return;
      editor.chain().focus().addColumnAfter().run();
    },
    
    // Delete current row
    deleteRow: () => {
      if (!editor) return;
      editor.chain().focus().deleteRow().run();
    },
    
    // Delete current column
    deleteColumn: () => {
      if (!editor) return;
      editor.chain().focus().deleteColumn().run();
    },
    
    // Delete entire table
    deleteTable: () => {
      if (!editor) return;
      editor.chain().focus().deleteTable().run();
    },
    
    // Toggle header row
    toggleHeaderRow: () => {
      if (!editor) return;
      editor.chain().focus().toggleHeaderRow().run();
    },
    
    // Toggle header column
    toggleHeaderColumn: () => {
      if (!editor) return;
      editor.chain().focus().toggleHeaderColumn().run();
    },
    
    // Toggle header cell
    toggleHeaderCell: () => {
      if (!editor) return;
      editor.chain().focus().toggleHeaderCell().run();
    },
    
    // Merge cells
    mergeCells: () => {
      if (!editor) return;
      editor.chain().focus().mergeCells().run();
    },
    
    // Split cells
    splitCell: () => {
      if (!editor) return;
      editor.chain().focus().splitCell().run();
    }
  };

  const addCodeBlock = () => {
    if (!editor) return;

    // Toggle code block first
    editor.chain().focus().toggleCodeBlock().run();

    // If a code block was created (not toggled off), prompt for language
    if (editor.isActive('codeBlock')) {
      const availableLanguages = [
        { name: 'JavaScript', value: 'javascript' },
        { name: 'TypeScript', value: 'typescript' },
        { name: 'HTML', value: 'html' },
        { name: 'CSS', value: 'css' },
        { name: 'Python', value: 'python' },
        { name: 'JSON', value: 'json' },
        { name: 'Bash/Shell', value: 'bash' },
      ];

      // Create language options for the user
      const options = availableLanguages
        .map((lang, i) => `${i + 1}. ${lang.name}`)
        .join('\n');

      const selection = window.prompt(
        `Select a language by number:\n${options}\n\nOr type a language name directly:`,
        '1'
      );

      if (selection) {
        let language;

        // Check if user selected by number
        const numSelection = parseInt(selection, 10);
        if (!isNaN(numSelection) && numSelection > 0 && numSelection <= availableLanguages.length) {
          language = availableLanguages[numSelection - 1].value;
        } else {
          // User typed a language name directly
          language = selection.toLowerCase();
        }

        editor.chain().focus().updateAttributes('codeBlock', { language }).run();
      }
    }
  };


  // Loading state
  if (!isClient || !editor) {
    return (
      <div className="bg-[#0A0A0A] p-4">
        <div className="text-white/60">Loading editor...</div>
      </div>
    );
  }

  // Read-only view
  if (readOnly) {
    return (
      <div className={`bg-[#0A0A0A] border-0 h-full ${className}`}>
        <EditorContent editor={editor} className="h-full" />
      </div>
    );
  }

  // Main editable editor with toolbar and bubble menu
  return (
    <div className={`flex flex-col h-full w-full bg-[#0A0A0A] rounded-[12px] ${className}`}>
      {/* Clean Software-style Toolbar */}
      <div
        className="px-3 py-2.5 mx-4 mt-0 mb-3 bg-black/30 backdrop-blur-sm border border-white/20 rounded-[12px] flex flex-wrap items-center gap-2 transition-all duration-200"
      >
        <TooltipProvider>
          {/* Text Formatting */}
          <div className="flex items-center space-x-1 mr-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-200 ${editor.isActive('bold') ? 'bg-black/60 text-white border border-white/30' : 'text-white/60 hover:text-white/80 hover:bg-black/20'}`}
                  onClick={() => editor.chain().focus().toggleBold().run()}
                >
                  <Bold className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Bold</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-200 ${editor.isActive('italic') ? 'bg-black/60 text-white border border-white/30' : 'text-white/60 hover:text-white/80 hover:bg-black/20'}`}
                  onClick={() => editor.chain().focus().toggleItalic().run()}
                >
                  <Italic className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Italic</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('underline') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleUnderline().run()}
                >
                  <UnderlineIcon className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Underline</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('strike') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleStrike().run()}
                >
                  <Strikethrough className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Strikethrough</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('code') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleCode().run()}
                >
                  <Code className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Inline Code</TooltipContent>
            </Tooltip>
          </div>

          {/* Headings */}
          <div className="flex items-center space-x-1 mr-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('heading', { level: 1 }) ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
                >
                  <Heading1 className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Heading 1</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('heading', { level: 2 }) ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
                >
                  <Heading2 className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Heading 2</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('heading', { level: 3 }) ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
                >
                  <Heading3 className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Heading 3</TooltipContent>
            </Tooltip>
          </div>

          {/* Lists and Blockquote */}
          <div className="flex items-center space-x-1 mr-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('bulletList') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleBulletList().run()}
                >
                  <List className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Bullet List</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('orderedList') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleOrderedList().run()}
                >
                  <ListOrdered className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Ordered List</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('taskList') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleTaskList().run()}
                >
                  <CheckSquare className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Task List</TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('blockquote') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().toggleBlockquote().run()}
                >
                  <Quote className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Blockquote</TooltipContent>
            </Tooltip>
          </div>

          {/* Alignment */}
          <div className="flex items-center space-x-1 mr-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive({ textAlign: 'left' }) ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().setTextAlign('left').run()}
                >
                  <AlignLeft className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Align Left</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive({ textAlign: 'center' }) ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().setTextAlign('center').run()}
                >
                  <AlignCenter className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Align Center</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive({ textAlign: 'right' }) ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().setTextAlign('right').run()}
                >
                  <AlignRight className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Align Right</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive({ textAlign: 'justify' }) ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => editor.chain().focus().setTextAlign('justify').run()}
                >
                  <AlignJustify className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Justify</TooltipContent>
            </Tooltip>
          </div>

          {/* Media, Links, Tables, and Code */}
          <div className="flex items-center space-x-1 mr-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white"
                  onClick={addImage}
                >
                  <ImageIcon className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Insert Image</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('link') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={addLink}
                >
                  <LinkIcon className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Insert Link</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('table') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={() => {
                    // Insert a table with 3 rows and 3 columns
                    editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();
                  }}
                >
                  <TableIcon className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Insert Table</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className={`rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 ${editor.isActive('codeBlock') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0] hover:text-white'}`}
                  onClick={addCodeBlock}
                >
                  <FileCode className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Code Block</TooltipContent>
            </Tooltip>
          </div>

          {/* History */}
          <div className="flex items-center space-x-1">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white"
                  onClick={() => editor.chain().focus().undo().run()}
                  disabled={!editor.can().undo()}
                >
                  <Undo className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Undo</TooltipContent>
            </Tooltip>

            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white"
                  onClick={() => editor.chain().focus().redo().run()}
                  disabled={!editor.can().redo()}
                >
                  <Redo className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Redo</TooltipContent>
            </Tooltip>
          </div>
        </TooltipProvider>
      </div>

      {/* Enhanced bubble menu that appears when text is selected */}
      <BubbleMenu
        editor={editor}
        tippyOptions={{ duration: 150 }}
        shouldShow={({ editor, view, state, from, to }) => {
          // Only show the text formatting menu when text is selected and not in a table
          return from !== to && !editor.isActive('table')
        }}
        className="bg-[#161618] rounded-md shadow-lg border border-[#1a1a1a] overflow-hidden flex"
      >
        <Button
          size="sm"
          variant="ghost"
          className={`rounded-none h-8 px-2 ${editor.isActive('bold') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0]'}`}
          onClick={() => editor.chain().focus().toggleBold().run()}
        >
          <Bold className="h-4 w-4" />
        </Button>
        <Button
          size="sm"
          variant="ghost"
          className={`rounded-none h-8 px-2 ${editor.isActive('italic') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0]'}`}
          onClick={() => editor.chain().focus().toggleItalic().run()}
        >
          <Italic className="h-4 w-4" />
        </Button>
        <Button
          size="sm"
          variant="ghost"
          className={`rounded-none h-8 px-2 ${editor.isActive('underline') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0]'}`}
          onClick={() => editor.chain().focus().toggleUnderline().run()}
        >
          <UnderlineIcon className="h-4 w-4" />
        </Button>
        <Button
          size="sm"
          variant="ghost"
          className={`rounded-none h-8 px-2 ${editor.isActive('strike') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0]'}`}
          onClick={() => editor.chain().focus().toggleStrike().run()}
        >
          <Strikethrough className="h-4 w-4" />
        </Button>
        <Button
          size="sm"
          variant="ghost"
          className={`rounded-none h-8 px-2 ${editor.isActive('code') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0]'}`}
          onClick={() => editor.chain().focus().toggleCode().run()}
        >
          <Code className="h-4 w-4" />
        </Button>
        <Button
          size="sm"
          variant="ghost"
          className={`rounded-none h-8 px-2 ${editor.isActive('link') ? 'bg-[#232326] text-white' : 'text-[#a0a0a0]'}`}
          onClick={addLink}
        >
          <LinkIcon className="h-4 w-4" />
        </Button>
      </BubbleMenu>
      
      {/* Special bubble menu for tables */}
      <BubbleMenu
        editor={editor}
        tippyOptions={{ duration: 150 }}
        shouldShow={({ editor }) => editor.isActive('table')}
        className="bg-[#161618] rounded-md shadow-lg border border-[#1a1a1a] p-2"
      >
        <div className="flex flex-col gap-2">
          <div className="flex items-center gap-2 mb-1">
            <span className="text-white/70 text-xs">Table Controls</span>
          </div>
          
          {/* Row operations */}
          <div className="flex items-center gap-1">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.addRowBefore}
                >
                  <ChevronsUp className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Add Row Before</TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.addRowAfter}
                >
                  <ChevronsDown className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Add Row After</TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.deleteRow}
                >
                  <RowsIcon className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Delete Row</TooltipContent>
            </Tooltip>
          </div>
          
          {/* Column operations */}
          <div className="flex items-center gap-1">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.addColumnBefore}
                >
                  <ChevronsLeft className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Add Column Before</TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.addColumnAfter}
                >
                  <ChevronsRight className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Add Column After</TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.deleteColumn}
                >
                  <ColumnsIcon className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Delete Column</TooltipContent>
            </Tooltip>
          </div>
          
          {/* Cell operations */}
          <div className="flex items-center gap-1">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.toggleHeaderCell}
                >
                  <Grid className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Toggle Header Cell</TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.mergeCells}
                >
                  <Combine className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Merge Cells</TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-[#232326]/80 text-[#a0a0a0] hover:text-white h-8 w-8 p-0"
                  onClick={tableOperations.splitCell}
                >
                  <Split className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Split Cell</TooltipContent>
            </Tooltip>
          </div>
          
          {/* Table operations */}
          <div className="flex items-center gap-1 mt-1 pt-1 border-t border-[#323232]">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  size="sm"
                  variant="ghost"
                  className="rounded-[6px] transition-all duration-150 hover:bg-red-900/20 text-red-400/70 hover:text-red-400 h-8 w-8 p-0"
                  onClick={tableOperations.deleteTable}
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>Delete Table</TooltipContent>
            </Tooltip>
          </div>
        </div>
      </BubbleMenu>

      {/* Horizontal floating menu that appears on empty lines */}
      <FloatingMenu
        editor={editor}
        tippyOptions={{ duration: 150 }}
        className="bg-[#161618] rounded-md shadow-lg border border-[#1a1a1a] overflow-hidden flex flex-row py-1 px-1"
      >
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="sm"
              variant="ghost"
              className="rounded-md p-2 h-auto w-auto"
              onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
            >
              <Heading1 className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Heading 1</TooltipContent>
        </Tooltip>

        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="sm"
              variant="ghost"
              className="rounded-md p-2 h-auto w-auto"
              onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
            >
              <Heading2 className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Heading 2</TooltipContent>
        </Tooltip>

        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="sm"
              variant="ghost"
              className="rounded-md p-2 h-auto w-auto"
              onClick={() => editor.chain().focus().toggleBulletList().run()}
            >
              <List className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Bullet List</TooltipContent>
        </Tooltip>

        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="sm"
              variant="ghost"
              className="rounded-md p-2 h-auto w-auto"
              onClick={() => editor.chain().focus().toggleTaskList().run()}
            >
              <CheckSquare className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Task List</TooltipContent>
        </Tooltip>

        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="sm"
              variant="ghost"
              className="rounded-md p-2 h-auto w-auto"
              onClick={() => editor.chain().focus().toggleBlockquote().run()}
            >
              <Quote className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Blockquote</TooltipContent>
        </Tooltip>

        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="sm"
              variant="ghost"
              className="rounded-md p-2 h-auto w-auto"
              onClick={() => {
                // Insert a table with 3 rows and 3 columns
                editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();
              }}
            >
              <TableIcon className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Table</TooltipContent>
        </Tooltip>

        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              size="sm"
              variant="ghost"
              className="rounded-md p-2 h-auto w-auto"
              onClick={addCodeBlock}
            >
              <FileCode className="h-4 w-4" />
            </Button>
          </TooltipTrigger>
          <TooltipContent>Code Block</TooltipContent>
        </Tooltip>
      </FloatingMenu>

      {/* Editor content with proper alignment support */}
      <div className="flex-1 overflow-hidden rounded-[12px]">
        <div className="mx-auto w-full max-w-4xl px-4">
          <EditorContent
            editor={editor}
            className="flex-1 h-full overflow-auto bg-[#0A0A0A] rounded-[12px] safari-editor-fix"
          />
        </div>
      </div>
    </div>
  );
}